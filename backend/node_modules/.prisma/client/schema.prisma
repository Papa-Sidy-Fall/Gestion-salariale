// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CAISSIER
  EMPLOYEE
}

enum ContractType {
  FIXE
  JOURNALIER
  HONORAIRE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  CONGE
  MALADIE
}

enum PayslipStatus {
  EN_ATTENTE
  PAYE
  PARTIEL
}

enum PayRunStatus {
  BROUILLON
  APPROUVE
  CLOTURE
}

enum PaymentMethod {
  VIREMENT
  ESPECES
  CHEQUE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(EMPLOYEE)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String     @id @default(uuid())
  name      String     @unique
  address   String?
  phone     String?
  email     String?
  logo      String?
  color     String?    @default("#6FA4AF")
  budget    Float      @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  employees Employee[]
  payRuns   PayRun[]
}

model Employee {
  id           String       @id @default(uuid())
  firstName    String
  lastName     String
  email        String?      @unique
  phone        String?
  address      String?
  position     String?
  contractType ContractType @default(FIXE)
  rate         Float        @default(0) // Salaire mensuel pour FIXE
  dailyRate    Float        @default(0) // Taux journalier pour JOURNALIER
  hourlyRate   Float        @default(0) // Taux horaire pour HONORAIRE
  isActive     Boolean      @default(true)
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
  payslips     Payslip[]
}

model Attendance {
  id          String           @id @default(uuid())
  employeeId  String
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime         @db.Date
  checkIn     DateTime?
  checkOut    DateTime?
  hoursWorked Float            @default(0)
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([employeeId, date])
}

model PayRun {
  id                         String       @id @default(uuid())
  period                     String // Format: YYYY-MM
  companyId                  String
  company                    Company      @relation(fields: [companyId], references: [id])
  status                     PayRunStatus @default(BROUILLON)
  fixedEmployeePaymentOption String       @default("FULL_MONTH") // "FULL_MONTH" ou "DAYS_WORKED"
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  payslips                   Payslip[]

  @@unique([companyId, period])
}

model Payslip {
  id         String        @id @default(uuid())
  employeeId String
  employee   Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payRunId   String
  payRun     PayRun        @relation(fields: [payRunId], references: [id])
  gross      Float
  deductions Float
  net        Float
  status     PayslipStatus @default(EN_ATTENTE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  payments   Payment[]
}

model Payment {
  id        String        @id @default(uuid())
  payslipId String
  payslip   Payslip       @relation(fields: [payslipId], references: [id])
  amount    Float
  method    PaymentMethod @default(VIREMENT)
  date      DateTime      @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

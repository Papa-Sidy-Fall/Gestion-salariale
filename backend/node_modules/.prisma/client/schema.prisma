// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CAISSIER
  EMPLOYEE
}

enum ContractType {
  JOURNALIER
  FIXE
  HONORAIRE
}

enum PayRunStatus {
  BROUILLON
  APPROUVE
  CLOTURE
}

enum PayslipStatus {
  EN_ATTENTE
  PAYE
  PARTIEL
}

enum PaymentMethod {
  ESPECES
  VIREMENT
  ORANGE_MONEY
  WAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  CONGE
  MALADIE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Company {
  id        String     @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  logo      String? // URL ou chemin vers le logo
  color     String?    @default("#6FA4AF") // Couleur principale de l'entreprise
  budget    Float      @default(1000000) // Budget salarial par d√©faut (1M FCFA)
  users     User[]
  employees Employee[]
  payRuns   PayRun[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("companies")
}

model Employee {
  id           String       @id @default(cuid())
  firstName    String
  lastName     String
  position     String
  contractType ContractType
  rate         Float // Salaire mensuel pour FIXE
  dailyRate    Float? // Taux journalier pour JOURNALIER
  hourlyRate   Float? // Taux horaire pour HONORAIRE
  bankDetails  String?
  isActive     Boolean      @default(true)
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payslips     Payslip[]
  attendances  Attendance[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("employees")
}

model PayRun {
  id        String       @id @default(cuid())
  period    String // e.g., "2023-10"
  status    PayRunStatus @default(BROUILLON)
  companyId String
  company   Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payslips  Payslip[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("pay_runs")
}

model Payslip {
  id         String        @id @default(cuid())
  employeeId String
  employee   Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payRunId   String
  payRun     PayRun        @relation(fields: [payRunId], references: [id], onDelete: Cascade)
  gross      Float
  deductions Float         @default(0)
  net        Float
  status     PayslipStatus @default(EN_ATTENTE)
  payments   Payment[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("payslips")
}

model Payment {
  id         String        @id @default(cuid())
  payslipId  String
  payslip    Payslip       @relation(fields: [payslipId], references: [id], onDelete: Cascade)
  amount     Float
  method     PaymentMethod
  date       DateTime      @default(now())
  receiptPdf String? // URL or path to PDF
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("payments")
}

model Attendance {
  id          String           @id @default(cuid())
  employeeId  String
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime         @db.Date
  checkIn     DateTime?
  checkOut    DateTime?
  hoursWorked Float?           @default(0)
  status      AttendanceStatus @default(PRESENT)
  notes       String?          @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([employeeId, date])
  @@index([employeeId, date])
  @@map("attendances")
}
